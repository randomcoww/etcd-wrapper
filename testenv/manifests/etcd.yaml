kind: Pod
apiVersion: v1
metadata:
  namespace: kube-system
  name: etcd-wrapper
spec:
  priorityClassName: system-node-critical
  priority: 2000001000
  hostNetwork: true
  restartPolicy: Always
  initContainers:
  - name: config-writer
    image: ${container_images.etcd_wrapper}
    env:
    - name: ca
      value: |
        ${indent(8, chomp(ca_cert))}
    - name: peer_ca
      value: |
        ${indent(8, chomp(peer_ca_cert))}
    - name: cert
      value: |
        ${indent(8, chomp(cert))}
    - name: key
      value: |
        ${indent(8, chomp(key))}
    - name: peer_cert
      value: |
        ${indent(8, chomp(peer_cert))}
    - name: peer_key
      value: |
        ${indent(8, chomp(peer_key))}
    - name: client_cert
      value: |
        ${indent(8, chomp(client_cert))}
    - name: client_key
      value: |
        ${indent(8, chomp(client_key))}
    command:
    - "sh"
    - "-c"
    - |
      echo -e "$ca" > ${pki_path}/ca.pem && \
      echo -e "$peer_ca" > ${pki_path}/peer-ca.pem && \
      echo -e "$cert" > ${pki_path}/cert.pem && \
      echo -e "$key" > ${pki_path}/key.pem && \
      echo -e "$peer_cert" > ${pki_path}/peer-cert.pem && \
      echo -e "$peer_key" > ${pki_path}/peer-key.pem && \
      echo -e "$client_cert" > ${pki_path}/client-cert.pem && \
      echo -e "$client_key" > ${pki_path}/client-key.pem
    volumeMounts:
    - name: pki
      mountPath: ${pki_path}
  containers:
  - name: etcd-wrapper
    image: ${container_images.etcd_wrapper}
    args:
    # etcd args
    - --name=${name}
    - --trusted-ca-file=${pki_path}/ca.pem
    - --peer-trusted-ca-file=${pki_path}/peer-ca.pem
    - --cert-file=${pki_path}/cert.pem
    - --key-file=${pki_path}/key.pem
    - --peer-cert-file=${pki_path}/peer-cert.pem
    - --peer-key-file=${pki_path}/peer-key.pem
    - --initial-advertise-peer-urls=${initial_advertise_peer_urls}
    - --listen-peer-urls=${listen_peer_urls}
    - --advertise-client-urls=${advertise_client_urls}
    - --listen-client-urls=${listen_client_urls}
    - --initial-cluster-token=${cluster_token}
    - --initial-cluster=${initial_cluster}
    # pod manifest args
    - --etcd-image=${container_images.etcd}
    - --etcd-snaphot-file=${etcd_snapshot_path}
    - --etcd-pod-manifest-file=${etcd_pod_manifest_path}
    # wrapper args
    - --client-cert-file=${pki_path}/client-cert.pem
    - --client-key-file=${pki_path}/client-key.pem
    - --initial-cluster-clients=${initial_cluster_clients}
    - --s3-backup-resource=${backup_resource.resource}
    env:
    - name: AWS_ACCESS_KEY_ID
      value: "${backup_resource.access_key_id}"
    - name: AWS_SECRET_ACCESS_KEY
      value: "${backup_resource.secret_access_key}"
    - name: AWS_DEFAULT_REGION
      value: "${backup_resource.aws_region}"
    - name: AWS_SDK_LOAD_CONFIG
      value: "1"
    volumeMounts:
    - name: pki-volume
      mountPath: ${pki_path}
    - name: snapshot-volume
      mountPath: ${dirname(etcd_snapshot_path)}
  volumes:
  - name: pki-volume
    hostPath:
      path: ${pki_path}
  - name: snapshot-volume
    hostPath:
      path: ${dirname(etcd_snapshot_path)}